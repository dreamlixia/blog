(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{483:function(e,t,i){"use strict";i.r(t);var s=i(27),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[i("h3",{attrs:{id:"solid五大设计原则"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#solid五大设计原则"}},[e._v("#")]),e._v(" solid五大设计原则")]),e._v(" "),i("hr"),e._v(" "),i("h4",{attrs:{id:"单一职责原则-the-single-responsibility-principle-srp"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#单一职责原则-the-single-responsibility-principle-srp"}},[e._v("#")]),e._v(" 单一职责原则 The Single-Responsibility Principle (SRP)")]),e._v(" "),i("blockquote",[i("p",[e._v("单一职责原则，就是说一个类仅有一个引起它变化的原因。也有人把它解释为只做一件事情")])]),e._v(" "),i("h4",{attrs:{id:"开放闭合原则-the-open-closed-principle-ocp"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#开放闭合原则-the-open-closed-principle-ocp"}},[e._v("#")]),e._v(" 开放闭合原则 The Open/Closed Principle (OCP)")]),e._v(" "),i("blockquote",[i("p",[e._v("所有的系统在其生命周期里都会改变，需求会变是正常的，好的系统不会拒绝变化，只会需要添加code或者修改很少的code就能支持这些变化。")]),e._v(" "),i("p",[e._v("它强调对扩展开放，对修改闭合。办法：")]),e._v(" "),i("p",[e._v("抽象、多态")])]),e._v(" "),i("h4",{attrs:{id:"里氏替换原则-the-liskov-substitution-principle-lsp"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#里氏替换原则-the-liskov-substitution-principle-lsp"}},[e._v("#")]),e._v(" 里氏替换原则 The Liskov Substitution Principle (LSP)")]),e._v(" "),i("blockquote",[i("p",[e._v("自类型必须能够替换它的基类型。")]),e._v(" "),i("p",[e._v("强调继承。")])]),e._v(" "),i("h4",{attrs:{id:"接口分离原则-the-interface-segregation-principle-isp"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#接口分离原则-the-interface-segregation-principle-isp"}},[e._v("#")]),e._v(" 接口分离原则 The Interface Segregation Principle (ISP)")]),e._v(" "),i("blockquote",[i("p",[e._v("客户端不应该被迫依赖于它不使用的方法。简单来说就是更小更具体的瘦接口比庞大臃肿的胖接口好。")])]),e._v(" "),i("h4",{attrs:{id:"依赖倒置原则-the-dependency-inversion-principle-dip"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#依赖倒置原则-the-dependency-inversion-principle-dip"}},[e._v("#")]),e._v(" 依赖倒置原则 The Dependency-Inversion Principle (DIP)")]),e._v(" "),i("blockquote",[i("p",[e._v("高层模块不应该依赖低层模块，两者都应该依赖其抽象。抽象不应该依赖细节，细节应该依赖于抽象。低层模块不应该影响高层模块，否则高层模块很难做到复用。")])]),e._v(" "),i("comment-comment")],1)}),[],!1,null,null,null);t.default=r.exports}}]);