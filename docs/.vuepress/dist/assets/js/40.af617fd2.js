(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{456:function(t,s,a){"use strict";a.r(s);var r=a(27),e=Object(r.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h3",{attrs:{id:"slot"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#slot"}},[t._v("#")]),t._v(" slot")]),t._v(" "),a("hr"),t._v(" "),a("h4",{attrs:{id:"概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[t._v("#")]),t._v(" 概念")]),t._v(" "),a("p",[t._v("插槽，Vue的内容分发机制。组件内部的模版引擎是使用slot元素作为承载分发内容的出口。插槽slot是子组件的一个模板标签元素，而这个标签元素是否显示，如何显示，是有父组件决定的。")]),t._v(" "),a("h4",{attrs:{id:"分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分类"}},[t._v("#")]),t._v(" 分类")]),t._v(" "),a("ul",[a("li",[t._v("默认插槽：匿名插槽，slot没有指定name属性，一个组件只有一个默认插槽；")]),t._v(" "),a("li",[t._v("具名插槽：指定name属性的slot，一个组件可以有多个具名插槽；")]),t._v(" "),a("li",[t._v("作用域插槽：是匿名插槽和具名插槽的一个变体，不同点是子组件内部数据可以传递给父组件，父组件根据这个数据决定如何渲染该插槽；")])]),t._v(" "),a("h4",{attrs:{id:"实现原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现原理"}},[t._v("#")]),t._v(" 实现原理")]),t._v(" "),a("p",[t._v("当子组件vm实例化时，获取到父组件传入的slot标签内容，放在"),a("a",{attrs:{href:""}},[t._v("vm.$slot")]),t._v("中，默认插槽为"),a("a",{attrs:{href:""}},[t._v("vm.$slot.default")]),t._v("，具名插槽为"),a("a",{attrs:{href:""}},[t._v("vm.$slot.xxx")]),t._v("，当组件执行渲染函数时，遇到slot标签，使用$slot中的内容进行替换，此时可以为插槽传递数据，如果存在数据，则可称为作用域插槽。")]),t._v(" "),a("comment-comment")],1)}),[],!1,null,null,null);s.default=e.exports}}]);