(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{467:function(e,n,t){"use strict";t.r(n);var a=t(27),s=Object(a.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h3",{attrs:{id:"判断链接是否为图片或pdf"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#判断链接是否为图片或pdf"}},[e._v("#")]),e._v(" 判断链接是否为图片或pdf")]),e._v(" "),t("hr"),e._v(" "),t("h4",{attrs:{id:"场景-遇到需要实现上传的文件-图片预览功能的时候-后端给我们的是一个链接的情况-使用图片预览组件的话只能支持png-jpg等图片-pdf类的会失败-因此-需要通过浏览器解析链接-用curl获取图片url的response-header-区分是图片还是pdf-然后使用各自的预览方法去实现。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#场景-遇到需要实现上传的文件-图片预览功能的时候-后端给我们的是一个链接的情况-使用图片预览组件的话只能支持png-jpg等图片-pdf类的会失败-因此-需要通过浏览器解析链接-用curl获取图片url的response-header-区分是图片还是pdf-然后使用各自的预览方法去实现。"}},[e._v("#")]),e._v(" 场景：遇到需要实现上传的文件/图片预览功能的时候，后端给我们的是一个链接的情况，使用图片预览组件的话只能支持png,jpg等图片，pdf类的会失败，因此，需要通过浏览器解析链接，用CURL获取图片URL的response header，区分是图片还是pdf，然后使用各自的预览方法去实现。")]),e._v(" "),t("h4",{attrs:{id:"php"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#php"}},[e._v("#")]),e._v(" PHP")]),e._v(" "),t("ol",[t("li",[e._v("创建一个curl，并将头文件的信息，作为数据流输出")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('$url = "http://*************";  //图片的链接地址\n\n$ch = curl_init();\n\ncurl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1); //是否跟着爬取重定向的页面\n\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); //将curl_exec()获取的值以文本流的形式返回，而不是直接输出。\n\ncurl_setopt($ch, CURLOPT_HEADER,  1); // 启用时会将头文件的信息作为数据流输出\n\ncurl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 5); //设置超时时间\n\ncurl_setopt($ch, CURLOPT_URL, $url);  //设置URL\n\n$content = curl_exec($ch);\n\n$httpcode = curl_getinfo($ch, CURLINFO_HTTP_CODE);  //curl的httpcode\n\n$headerSize = curl_getinfo($ch, CURLINFO_HEADER_SIZE); //获取头大小\n\ncurl_close($ch);\n')])])]),t("ol",{attrs:{start:"2"}},[t("li",[e._v("此时content中包含头信息和图片的二进制内容，然后根据头的大小（$headerSize）截取出头信息，剩下的就是图片的二进制内容了")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("$headers = substr($content, 0, $headerSize); //根据头大小截取头信息\n")])])]),t("blockquote",[t("p",[e._v("头信息输出结构")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('HTTP/1.1 200 OK\n\nServer: JSP3/2.0.14\n\nDate: Sun, 30 Jul 2017 06:54:47 GMT\n\nContent-Type: image/jpeg\n\nContent-Length: 152094\n\nConnection: keep-alive\n\nETag: "7751852900776331536"\n\nLast-Modified: Tue, 02 May 2017 10:33:16 GMT\n\nExpires: Wed, 18 Jul 2018 06:25:38 GMT\n\nAge: 879492\n\nCache-Control: max-age=31536000\n\nAccept-Ranges: bytes\n\nError-Message: OK\n\nOhc-Response-Time: 1 0 0 0 0 0\n')])])]),t("ol",{attrs:{start:"3"}},[t("li",[e._v("可以看到里面有个Content-Type: image/jpeg，然后处理头信息，取出想要的内容")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("$head_data=preg_split('/\\n/',$headers);  //逐行放入数组中\n\n$head_data = array_filter($head_data);  //过滤空数组\n\n$headers_arr = [];\n\nforeach($head_data as $val){  //按:分割开\n\n    list($k,$v) = explode(\":\",$val); //:前面的作为key，后面的作为value，放入数组中\n\n    $headers_arr[$k] = $v;\n\n}\n\n$img_type = explode(\"/\",trim($headers_arr['Content-Type']));  //然后将获取到的Content-Type中的值用/分隔开\n\nif ($httpcode == 200 && strcasecmp($img_type[0],'image') == 0) {//如果httpcode为200，并且Content-type前面的部分为image，则说明该链接可以访问成功，并且是一个图片类型的\n\n    $type = $img_type[1];\n\n    .............\n\n} else {//否则........\n\n ............\n\n}\n")])])]),t("h4",{attrs:{id:"vue"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue"}},[e._v("#")]),e._v(" Vue")]),e._v(" "),t("ol",[t("li",[e._v("使用axios获取响应头")]),e._v(" "),t("li",[e._v("从响应头中取出content-type")]),e._v(" "),t("li",[e._v("判断格式：/pdf或/images")]),e._v(" "),t("li",[e._v("相应的，图片则使用组件库中的图片预览组件，pdf则使用弹窗内打开，或者新开标签页的方式")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("axios.get('url')\n.then(response => {\n    const isPDF = (type) => {\n        return type && type.indexOf('/pdf') > -1\n    }\n    const isImage = (type) => {\n        return type && type.indexOf('/image) > -1\n    }\n    let fileType = response.headers['content-type'] // \"application/pdf\"\n    let fileTypes = {\n        pdf: isPDF(fileType),\n        image: isImage(fileType)\n    }\n    if(fileType.pdf){\n        return // 弹窗\n    }else if(fileType.images){\n        return // 图片组件\n    }\n})\n")])])]),e._v(" "),t("comment-comment")],1)}),[],!1,null,null,null);n.default=s.exports}}]);