(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{450:function(v,e,r){"use strict";r.r(e);var _=r(27),t=Object(_.a)({},(function(){var v=this,e=v.$createElement,r=v._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[r("p",[v._v("HTTPS的安全性是由TLS（传输层安全性）来保证的。")]),v._v(" "),r("p",[v._v("加密可以分为两大类：对称加密和非对称加密。")]),v._v(" "),r("h2",{attrs:{id:"对称加密"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#对称加密"}},[v._v("#")]),v._v(" 对称加密：")]),v._v(" "),r("p",[v._v("双方使用同一个密钥对数据进行加密和解密。但是对称加密存在一个问题，就是如何保证密钥传输的安全性，因为密钥还是会通过网络进行传输，一旦被他人获取到，整个加密过程就毫无作用了。这就用到非对称加密方法，要比对称加密快。")]),v._v(" "),r("h2",{attrs:{id:"非对称加密"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#非对称加密"}},[v._v("#")]),v._v(" 非对称加密：")]),v._v(" "),r("p",[v._v("我们拥有两个密钥，一个公钥，一个私钥。公钥匙公开的，私钥是保密的。使用公钥加密的数据，只有对应的私钥才能解密，使用私钥加密的数据，只有对应的公钥才能解密。我们可以将公钥公布出去，任何想和我们通信的客户，都可以使用我们提供的公钥对数据进行加密，然后我们就可以使用私钥进行解密，这样就能保证数据的安全性了。但是非对称加密有一个缺点就是加密过程很慢，如果每次通信都使用非对称加密，会导致通信事件过长的问题。")]),v._v(" "),r("h2",{attrs:{id:"混合加密"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#混合加密"}},[v._v("#")]),v._v(" 混合加密：")]),v._v(" "),r("p",[v._v("对称加密和非对称加密配合使用。")]),v._v(" "),r("p",[v._v("基于以上两个问题，选择了更加完美的一个方案。就是在数据传输阶段依然使用对称加密，但对称加密的密钥采用非对称加密来传输。")]),v._v(" "),r("p",[r("strong",[v._v("HTTPS使用混合加密，并且还要配合数字证书来实现安全性。")])]),v._v(" "),r("p",[v._v("过程：")]),v._v(" "),r("ul",[r("li",[v._v("首先浏览器向服务器发送对称加密套件列表、非对称加密套件列表和随机数 client-random；")]),v._v(" "),r("li",[v._v("服务器保存随机数 client-random，选择对称加密和非对称加密的套件，然后生成随机数 service-random，向浏览器发送选择的加密套件、service-random 和公钥；")]),v._v(" "),r("li",[v._v("浏览器保存公钥，并利用 client-random 和 service-random 计算出来 pre-master，然后利用公钥对 pre-master 加密，并向服务器发送加密后的数据；")]),v._v(" "),r("li",[v._v("最后服务器拿出自己的私钥，解密出 pre-master 数据，并返回确认消息。")])]),v._v(" "),r("p",[v._v("此时，服务器和浏览器就有了共同的 client-random、service-random 和 pre-master，然后服务器和浏览器会使用这三组随机数生成对称密钥，因为服务器和浏览器使用同一套方法来生成密钥，所以最终生成的密钥也是相同的。")]),v._v(" "),r("p",[r("em",[v._v("加密套件：")])]),v._v(" "),r("blockquote",[r("p",[v._v("加密套件是指在ssl通信中，服务端和客户端所使用的加密算法的组合。在ssl握手初期，客户端将自身支持的加密套件发送给服务器。在握手阶段，服务器从中尽可能选出一个套\n件，作为之后所使用的加密方式。其实就是服务器选择一个双方要使用的加密方法。")])]),v._v(" "),r("h2",{attrs:{id:"数字证书"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#数字证书"}},[v._v("#")]),v._v(" 数字证书：")]),v._v(" "),r("ul",[r("li",[v._v("首先，服务器先用Hash算法将自己的公钥和其他信息(例如认证时长，服务器域名…)进行加密，生成一个信息摘要，传递给认证机构，并且认证机构也会有自己的公钥和私钥，并且认证机构会将自己的公钥给了浏览器。")]),v._v(" "),r("li",[v._v("然后认证机构会用自己的私钥对已经拿到的浏览器摘要进行加密，生成签名，"),r("strong",[v._v("签名和信息摘要合在一起称为数字证书")]),v._v("，（认证机构生成的签名是证书的关键，有了这个认证机构的签名，证书就合法了）。")]),v._v(" "),r("li",[v._v("然后再把这个证书传递给服务器，服务器会保存自己的证书，服务器并且也会把证书传递给浏览器。")]),v._v(" "),r("li",[v._v("浏览器用认证机构传给自己的公钥对证书进行解密拿到摘要A，并读取证书中相关的明文信息，采用 CA 签名时相同的 Hash 函数来计算并得到摘要B，对比信息摘要 A 和信息摘要 B，如果一致，则可以确认证书是合法的，同时在摘要A中也拿到了服务器的公钥。")])]),v._v(" "),r("h2",{attrs:{id:"详细的ssl-tls握手过程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#详细的ssl-tls握手过程"}},[v._v("#")]),v._v(" 详细的SSL/TLS握手过程：")]),v._v(" "),r("ol",[r("li",[v._v('"client hello" 消息：客户端通过发送 “client hello” 消息向服务器发起握手请求，该消息包含了客户端所支持的 TLS 版本，支持的算法列表和密码组合以供服务器进行选择，还有一个 “client random” 随机字符串。')]),v._v(" "),r("li",[v._v('"server hello" 消息：服务器发送 “server hello” 消息对客户端进行回应，该消息包含了服务器选择的加密算法，服务器选择的密码组合，数字证书和 “server random” 随机字符串。')]),v._v(" "),r("li",[v._v("验证：客户端对服务器发来的证书进行验证，确保对方的合法身份，验证过程可以细化为以下几个步骤：\n"),r("ul",[r("li",[v._v("检查数字签名")]),v._v(" "),r("li",[v._v("验证证书链")]),v._v(" "),r("li",[v._v("检查证书的有效期")]),v._v(" "),r("li",[v._v("检查证书的撤回状态 (撤回代表证书已失效)")])])]),v._v(" "),r("li",[v._v('"premaster secret"字符串：客户端向服务器发送另一个随机字符串 “premaster secret (预主密钥)”，这个字符串是经过服务器的公钥加密过的，只有对应的私钥才能解密。')]),v._v(" "),r("li",[v._v("使用私钥：服务器使用私钥解密 “premaster secret”。")]),v._v(" "),r("li",[v._v("生成共享密钥：客户端和服务器均使用 client random，server random 和 premaster secret，并通过相同的算法生成相同的共享密钥 KEY。")]),v._v(" "),r("li",[v._v("客户端就绪：客户端发送经过共享密钥 KEY 加密过的 “finished” 信号，为了防止握手过程遭到篡改，该消息的内容是前一阶段所有握手消息的MAC值。")]),v._v(" "),r("li",[v._v("服务器就绪：服务器发送经过共享密钥 KEY 加密过的 “finished” 信号，该消息的内容是前一阶段所有握手消息的 MAC 值。")]),v._v(" "),r("li",[v._v("达成安全通信：握手完成，双方使用对称加密进行安全通信。")])]),v._v(" "),r("h2",{attrs:{id:"数字签名"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#数字签名"}},[v._v("#")]),v._v(" 数字签名：")]),v._v(" "),r("p",[v._v("数字签名（又称公钥数字签名）是只有信息的发送者才能产生的别人无法伪造的一段数字串，这段数字串同时也是对信息的发送者发送信息真实性的一个有效证明。数字签名通常定义两种互补的运算，一个用于签名，另一个用于验证。数字签名用到了非对称密钥加密技术与数字摘要技术。")]),v._v(" "),r("comment-comment")],1)}),[],!1,null,null,null);e.default=t.exports}}]);