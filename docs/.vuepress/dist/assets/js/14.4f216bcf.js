(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{421:function(t,_,v){t.exports=v.p+"assets/img/链表和数组的区别.024a780f.png"},490:function(t,_,v){"use strict";v.r(_);var a=v(27),s=Object(a.a)({},(function(){var t=this,_=t.$createElement,a=t._self._c||_;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h3",{attrs:{id:"算法相关概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算法相关概念"}},[t._v("#")]),t._v(" 算法相关概念")]),t._v(" "),a("hr"),t._v(" "),a("h2",{attrs:{id:"_1-线性时间复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-线性时间复杂度"}},[t._v("#")]),t._v(" 1.线性时间复杂度")]),t._v(" "),a("p",[t._v("线性时间复杂度，时间复杂度为线性阶O(n)。")]),t._v(" "),a("p",[t._v("同一问题可以用不同的算法解决，而一个算法质量优劣（算法复杂度）可以由时间复杂度和空间复杂度来评价。")]),t._v(" "),a("p",[t._v("算法的时间复杂度是指执行算法所需要的时间工作量，即度量算法执行时间的长短，他定量描述了该算法的执行时间。")]),t._v(" "),a("p",[t._v("按数量级递增排列，常见的时间复杂度由：常数阶O(1)、对数阶O(log2n)、线性阶O(n)、线性对数阶O(nlog2n)、平方阶O(n^2)、立方阶O(n^3)……")]),t._v(" "),a("p",[t._v("随着问题规模n的不断扩大，时间复杂度不断增大，算法执行效率越低。")]),t._v(" "),a("h2",{attrs:{id:"_2-链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-链表"}},[t._v("#")]),t._v(" 2.链表")]),t._v(" "),a("p",[t._v("链表作为C语言中一种基础的数据结构。可以分为单向链表和双向链表。")]),t._v(" "),a("p",[t._v("链表是一种物理存储上非连续、数据元素的逻辑顺序通过链表中的指针链接次序，实现的一种线性存储结构。")]),t._v(" "),a("p",[t._v("链表由一系列的节点组成，节点在运行时动态生成，每个节点包含两个部分，存储数据元素的"),a("strong",[t._v("数据域")]),t._v("和存储下一个节点地址的"),a("strong",[t._v("指针域")]),t._v("。")]),t._v(" "),a("h4",{attrs:{id:"链表和数组的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链表和数组的区别"}},[t._v("#")]),t._v(" 链表和数组的区别：")]),t._v(" "),a("div",{staticStyle:{width:"100%","text-align":"center"}},[a("img",{attrs:{src:v(421)}})]),t._v(" "),a("ol",[a("li",[t._v("链表是通过节点把离散的数据链接成一个表，通过对节点的插入和删除从而实现对数据的存取。")]),t._v(" "),a("li",[t._v("数组是通过开辟一段连续的内存来存取数据，这是链表和数组最大的区别。")]),t._v(" "),a("li",[t._v("数组的每个成员对应链表的节点，成员和节点的数据类型可以是标准的C类型也可以是自定义结构体。")]),t._v(" "),a("li",[t._v("数组有起始地址和结束地址，而链表是一个圈，没有头尾之分，但是为了方便节点的插入和删除操作会认为规定一个跟节点。")])]),t._v(" "),a("comment-comment")],1)}),[],!1,null,null,null);_.default=s.exports}}]);