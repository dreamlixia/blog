(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{422:function(t,n,r){"use strict";r.r(n);var e=r(56),a=Object(e.a)({},(function(){var t=this,n=t.$createElement,r=t._self._c||n;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h4",{attrs:{id:"两数之和"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#两数之和"}},[t._v("#")]),t._v(" 两数之和")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("/**\n输入：nums = [2,7,11,15], target = 9\n输出：[0,1]\n解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1]\n*/\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\n// 解题：\n// 枚举每一个数为x，遍历寻找数组中是否存在 target - x\nvar twoSum = function(nums, target) {\n    for(var i = 0; i < nums.length; i ++){\n        for(var j = i + 1; j < nums.length; j ++){\n            if(nums[i] === target - nums[j]){\n                return [i, j]\n            }\n        }\n    }\n\n};\n\nvar nums = [22, 45, 3, 87, 4, 0, 76]\nvar result = twoSum(nums, 3)\nconsole.log(result)\n// [2, 5]\n")])])]),r("h4",{attrs:{id:"字符串翻转"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#字符串翻转"}},[t._v("#")]),t._v(" 字符串翻转")]),t._v(" "),r("hr"),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("function reverseStr(str) {\n    // 字符串转化为数组\n    let list = str.split('')\n    let len = list.length\n    // 定义左右指针，左从下标0开始，右从最后一位下标开始\n    let left_p = 0\n    let right_p = len - 1\n    // 定义条件\n    while (left_p < right_p) {\n        // 定义一个容器去存放第一个要替换位置的元素\n        let tem = list[left_p]\n        // 左替换为右\n        list[left_p] = list[right_p]\n        // 右替换为左\n        list[right_p] = tem\n        // 左指针递增\n        left_p++\n        // 右指针递减\n        right_p--\n    }\n    // 转回字符串\n    return list.join('')\n}\n\nlet str = '题法算转翻串符字道一是这'\n\nconsole.log(reverseStr(str))\n\n// 这是一道字符串翻转算法题\n")])])]),r("h4",{attrs:{id:"js快排"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#js快排"}},[t._v("#")]),t._v(" js快排")]),t._v(" "),r("hr"),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("function sort(arr) {\n    // 临界条件\n    if (arr.length <= 1) return arr\n    // 取基准点\n    let index = Math.floor(arr.length / 2)\n    // 取基准元素\n    let cur = arr.splice(index, 1)[0]\n    // 定义两个数组\n    let left = []\n    let right = []\n    // 循环\n    for (var i = 0; i < arr.length; i++) {\n        // 元素小于基准元素，追加到left[]\n        // 元素大于基准元素，追加到right[]\n        if (arr[i] < cur) {\n            left.push(arr[i])\n        } else {\n            right.push(arr[i])\n        }\n    }\n    // 递归\n    return sort(left).concat([cur], sort(right))\n}\n\nvar arr = [3, 10, 4, 5, 6, 23, 50, 12, 44, 9]\n\nconsole.log(sort(arr))\n\n//[3, 4, 5, 6, 9, 10, 12, 23, 44, 50]\n")])])]),r("h4",{attrs:{id:"对角线打印二维数组"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#对角线打印二维数组"}},[t._v("#")]),t._v(" 对角线打印二维数组")]),t._v(" "),r("hr"),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code")])]),r("h4",{attrs:{id:"判断字符串是否对称"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#判断字符串是否对称"}},[t._v("#")]),t._v(" 判断字符串是否对称")]),t._v(" "),r("hr"),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code")])]),t._v(" "),r("comment-comment")],1)}),[],!1,null,null,null);n.default=a.exports}}]);