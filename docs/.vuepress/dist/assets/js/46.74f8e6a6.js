(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{463:function(t,e,s){"use strict";s.r(e);var n=s(27),a=Object(n.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("Axios是对XMLHttpRequest的封装，而fetch是一种新的资源请求方式。")]),t._v(" "),s("p",[t._v("他们最大的不同点在于fetch是浏览器原生支持，而axios需要引入axios库。")]),t._v(" "),s("h2",{attrs:{id:"_1-兼容性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-兼容性"}},[t._v("#")]),t._v(" 1.兼容性")]),t._v(" "),s("p",[t._v("axios可以兼容IE浏览器，fetch在IE浏览器和一些老版本的浏览器没有受到支持。但是有个库whatwg-fetch可以使在老版本浏览器中使用fetch。")]),t._v(" "),s("p",[t._v("注意：在比较旧的浏览器上面可能还需要使用promise兼容库。")]),t._v(" "),s("h2",{attrs:{id:"_2请求方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2请求方式"}},[t._v("#")]),t._v(" 2请求方式")]),t._v(" "),s("p",[t._v("axios:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('const options = {\n    url: "http://www.baidu.com/",\n    method: "POST",\n    headers: {\n        Accept: "application/json",\n        "Content-type": "application/json;charset:UTF-8"\n    },\n    data: {\n        a: 1, \n        b: 2\n    }\n}\naxios(options).then((response) => {\n    console.log(response.status)\n})\n')])])]),s("p",[t._v("fetch:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('const url = "http://www.baidu.com/"\nconst options = {\n    method: "POST",\n    headers: {\n        Accept: "application/json",\n        "Content-type": "application/json;charset:UTF-8"\n    },\n    body: JSON.stringify({\n        a: 1,\n        b: 2\n    })\n}\nfetch(url,  options).then((response) => {\n    console.log(response.status)\n})\n')])])]),s("p",[t._v("其中的不同点在于数据传递方式的不同，axios在data属性中，fetch在body属性中以字符串的形式传递。")]),t._v(" "),s("h2",{attrs:{id:"_3-响应超时"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-响应超时"}},[t._v("#")]),t._v(" 3.响应超时")]),t._v(" "),s("p",[t._v("axios可以直接加上timeout属性，fetch却需要封装。")]),t._v(" "),s("p",[t._v("axios:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('axios({\n    url: "http://www.baidu.com/",\n    method: "POST",\n    timeout: 4000,\n    headers: {\n        Accept: "application/json",\n        "Content-type": "application/json;charset:UTF-8"\n    },\n    data: {\n        a: 1, \n        b: 2\n    }\n}).then(res => {\n    console.log(res)\n}).catch(error => console.error(\'响应超时\'))\n')])])]),s("p",[t._v("fetch:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('const controlls = new AbortController();\nconst url = "http://www.baidu.com/"\nconst options = {\n    method: "POST",\n    singal: controlls.singal,\n    headers: {\n        Accept: "application/json",\n        "Content-type": "application/json;charset:UTF-8"\n    },\n    body: JSON.stringify({\n        a: 1,\n        b: 2\n    })\n}\nconst timeoutId = setTimeout(() => controlls.abort(), 4000)\nfetch(url,  options).then((response) => {\n    console.log(response.status)\n}).catch(error => console.error(\'响应超时\'))\n')])])]),s("h2",{attrs:{id:"_4-对数据的转化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-对数据的转化"}},[t._v("#")]),t._v(" 4.对数据的转化")]),t._v(" "),s("p",[t._v("axios会对数据自动进行转化，fetch需要手动处理")]),t._v(" "),s("p",[t._v("axios:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("axios.get(url).then(\n    (res) => {\n        console.log(res.data)\n    },\n    (err) =>{\n        console.log(error)\n    }\n)\n")])])]),s("p",[t._v("fetch:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("fetch(url, options).then(res => res.json())\n                .then(data => console.log(data))\n                .catch(error => console.log(error))\n")])])]),s("p",[t._v("fetch提供的转化API包含以下几种：")]),t._v(" "),s("blockquote",[s("p",[t._v("arrayBuffer();")]),t._v(" "),s("p",[t._v("blob();")]),t._v(" "),s("p",[t._v("text();")]),t._v(" "),s("p",[t._v("json();")]),t._v(" "),s("p",[t._v("formData();")])]),t._v(" "),s("h2",{attrs:{id:"_5-http拦截器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-http拦截器"}},[t._v("#")]),t._v(" 5.HTTP拦截器")]),t._v(" "),s("p",[t._v("Axios提供了拦截器，可以同意对请求或响应进行一些处理。使用它可以为请求附加token，为请求增加时间戳防止缓存，以及拦截响应，状态码不符合预期可以直接将响应消息通过弹窗展示在界面上。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("axios.interceptors.request.use((config) => {\n    // 在请求之前对参数进行处理\n    // 设置token\n    config.headers.token= 'xxjkdfkfskxxxx'\n    return config;\n})\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("axios.interceptors.response.use(response => {\n    // 在响应后对数据进行处理\n    let res = response.data\n    // 在返回特定状态码时弹窗相应提示信息\n    if(res.status == 500){\n        message.error('服务器错误')\n    }else if(res.status == 304){\n        message.error('xxx')\n    }\n    // ...\n    return response;\n}, error => {\n    console.log(error.response.data)\n})\n")])])]),s("p",[t._v("fetch本身没有拦截器功能，需要手动封装。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("fetch = ((originalFetch) => {\n    return (...argument) => {\n        const result = originalFetch.apply(this, arguments);\n        return result.then(console.log('请求已发送'))\n    }\n})(fetch)\n\nfetch(url).then(response => response.json())\n        .then((data) => console.log(data))\n")])])]),s("h2",{attrs:{id:"_6-同时请求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-同时请求"}},[t._v("#")]),t._v(" 6.同时请求")]),t._v(" "),s("p",[t._v("axios：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("axios.all([\n    axios.get(url1),\n    axios.get(url2)\n]).then(\n    axios.spread((obj1, obj2) => {\n        // ...\n    })\n)\n")])])]),s("p",[t._v("fetch:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("Promise.all([\n    fetch(url1),\n    fetch(url2)\n]).then(async [res1, res2] => {\n    const a = await res1.json();\n    const b = await res2.json();\n}).catch(error => {\n    console.log(error);\n})\n")])])]),s("h2",{attrs:{id:"_7-浏览器原生支持"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-浏览器原生支持"}},[t._v("#")]),t._v(" 7.浏览器原生支持")]),t._v(" "),s("p",[t._v("fetch现代浏览器原生支持，当网页打开控制台使用fetch几乎不需要什么配置就可以直接进行请求。")]),t._v(" "),s("comment-comment")],1)}),[],!1,null,null,null);e.default=a.exports}}]);